name: Release Azure func

on:
  workflow_call:
    inputs:
      azure-allow-no-subscriptions:
        required: false
        type: boolean
        description: Set this value to true to enable support for accessing tenants without subscriptions

      azure-app-name:
        required: true
        type: string
        description: Name of the Azure Function App

      azure-audience:
        required: false
        type: string
        description: Provide audience field for access-token. Default value is api://AzureADTokenExchange

      azure-auth-type:
        required: false
        type: string
        description: The type of authentication. Supported values are SERVICE_PRINCIPAL, IDENTITY. Default value is SERVICE_PRINCIPAL

      azure-environment:
        required: false
        type: string
        description: Name of the environment. Supported values are azurecloud, azurestack, azureusgovernment, azurechinacloud, azuregermancloud. Default being azurecloud

    secrets:
      azure-client-id:
        required: false
        description: ClientId of the Azure Service principal created

      azure-creds:
        required: false
        description: Paste output of az ad sp create-for-rbac as value of secret variable AZURE_CREDENTIALS

      azure-subscription-id:
        required: false
        description: Azure subscriptionId

      azure-tenant-id:
        required: false
        description: TenantId of the Azure Service principal created

      node-auth-token:
        required: true
        description: The token to authenticate NPM

jobs:
  continuous-integration:
    name: Continuous integration
    uses: ./.github/workflows/continuous-integration.yml
    secrets:
      node-auth-token: ${{ secrets.node-auth-token }}

  continuous-delivery:
    name: Continuous delivery
    needs: continuous-integration
    runs-on: ubuntu-latest
    steps:
      - name: Download build outputs
        uses: actions/download-artifact@v5
        with:
          artifact-ids: ${{ needs.continuous-integration.outputs.artifact-id }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: 22.16

      - name: Install dependencies for production
        run: npm i --ignore-scripts --no-audit --no-fund --omit=dev
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.node-auth-token }}

      - name: Azure login
        id: azure-login
        uses: azure/login@v2
        with:
          allow-no-subscriptions: ${{ inputs.azure-allow-no-subscriptions }}
          audience: ${{ inputs.azure-audience }}
          auth-type: ${{ inputs.azure-auth-type }}
          client-id: ${{ secrets.azure-client-id }}
          creds: ${{ secrets.azure-creds }}
          environment: ${{ inputs.azure-environment }}
          subscription-id: ${{ secrets.azure-subscription-id }}
          tenant-id: ${{ secrets.azure-tenant-id }}

      - name: Transform envs into JSON
        id: transform-envs-into-json
        run: |
          JSON_ARRAY="[]"

          add_to_json() {
            local key="$1"
            local value="$(printf '%s' "$2" | sed 's/\\/\\\\/g; s/"/\\"/g')"
            local entry="{ \"key\": \"$key\", \"value\": \"$value\", \"slotSetting\": false }"

            if [[ "$JSON_ARRAY" == "[]" ]]; then
              JSON_ARRAY="[ $entry ]"
            else
              JSON_ARRAY=$(echo "$JSON_ARRAY" | sed "s/]$/, $entry ]/")
            fi
          }

          for var in "${!APP_@}"; do
            add_to_json "$var" "${!var}"
          done

          add_to_json "APP_VERSION" "${{ needs.continuous-integration.outputs.version }}"
          add_to_json "FUNCTIONS_EXTENSION_VERSION" "~4"
          add_to_json "FUNCTIONS_WORKER_RUNTIME" "node"
          add_to_json "WEBSITE_NODE_DEFAULT_VERSION" "~22.16.0"

          echo "value=${JSON_ARRAY}" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Add app settings
        uses: azure/appservice-settings@v1
        with:
          app-name: ${{ inputs.azure-app-name }}
          app-settings-json: ${{ steps.transform-envs-into-json.outputs.value }}

      - name: Deploy function
        uses: azure/functions-action@v1
        with:
          app-name: ${{ inputs.azure-app-name }}
          respect-funcignore: true

      - name: Azure logout
        if: ${{ always() && steps.azure-login.conclusion == 'success' }}
        run: az logout
        shell: bash
